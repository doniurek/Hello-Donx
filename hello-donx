#!/usr/bin/env node

const { get } = require("https");

const CURRENCIES_API_BASE_URL = 'https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/'
const SONGS_API_BASE_URL = 'https://musicbrainz.org/ws/2/recording?query=limit=1&fmt=json&'
const NEWS_URL = 'https://rss.nytimes.com/services/xml/rss/nyt/World.xml'
const WEATHER_URL = 'https://wttr.in?format=3'

// const EXERCISES = [
//   '10 lunges for each leg',
//   '5 pushups',
//   '20 squats',
//   '30 bicycle crunches',
//   '10 crunches',
//   '20 jumping racks',
//   '1 minute plank'
// ]

const EXERCISES = {
  'lunges for each leg': 10,
  'pushups': 5,
  'squats': 20,
  'bicycle crunches': 20,
  'crunches': 10,
  'jumping racks': 20,
  'plank (in minutes)': 1
}


function promisifiedGet(url, headers={}) {
  return new Promise((resolve, reject) => {
    get(url, {headers: headers}, (response) => {
      let chunks_of_data = [];

      response.on('data', (fragments) => {
        chunks_of_data.push(fragments);
      });

      response.on('end', () => {
        let response_body = Buffer.concat(chunks_of_data);
        resolve(response_body.toString());
      });

      response.on('error', (error) => {
        reject(error);
      });
    });
  });
}

function getRandomInt(max, min=0) {
  return Math.floor(Math.random() * (max - min) + min);
}

function getMessage() {
  return (
    "\x1b[1m\x1b[36mHello, Donx!\x1b[0m\n\n" +
    "Today it's " + getCurrentDate()
  );
}

function getCurrentDate() {
  const currentDate = new Date();
  const options = {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  };
  
  return currentDate.toLocaleString("default", options);
}

async function getWeatherInfo() {
  return promisifiedGet(WEATHER_URL)
}

async function getSongOfTheDay() {
  const year = getRandomYear()
  const offset = await getRandomSongOffset(year)

  const musicBrainzSongData = await getMusicBrainzRecordingData(year, offset)
  
  const songTitle = musicBrainzSongData.recordings[0].title
  const artist = musicBrainzSongData.recordings[0]['artist-credit'][0].name //nice to have: support for multiple artists

  return `"${songTitle}" by ${artist}`; //nice to have: get release
}

function getRandomYear() {
  const currentYear = new Date().getFullYear()

  return getRandomInt(currentYear, currentYear-100)
}

async function getRandomSongOffset(year) {
  //due to MusicBrainz database limitations (large offsets are not returned) an offset have to be strongly delimited
  const musicBrainzRecordingData = await getMusicBrainzRecordingData(year, 0)
  
  const count = musicBrainzRecordingData.count
  const offset = getRandomInt(Math.min(count, 100000))

  return offset
}

async function getMusicBrainzRecordingData(year, offset) {
  const url = `${SONGS_API_BASE_URL}firstreleasedate:${year}&offset=${offset}`
  const headers = {'user-agent': 'Hello-Donx/1.0 github.com/doniurek'}
  const json = JSON.parse(await promisifiedGet(url, headers))

  return json
}

function getTagContent(data, tagName) {
  const openingTag = (`<${tagName}>`)
  const closingTag = (`</${tagName}>`)
  const startIndex = data.indexOf(openingTag) + openingTag.length
  const stopIndex = data.indexOf(closingTag)
  const substring = data.substring(startIndex, stopIndex)

  return substring
}

async function getMostPopularNews() {
  const xml = await promisifiedGet(NEWS_URL)
  const xmlString = xml.toString()

  const item = getTagContent(xmlString, 'item')

  const title = getTagContent(item, 'title')
  const description = getTagContent(item, 'description')
  const newsUrl = getTagContent(item, 'link')

  return [title, description, `Read more at: \x1b[4m${newsUrl}\x1b[0m`].join("\n")
}

async function getCurrencyRates(baseCurrency, checkedCurrency) {
  const url = 
    `${CURRENCIES_API_BASE_URL}${baseCurrency}/${checkedCurrency}.json`

  const rate = JSON.parse(await promisifiedGet(url))[checkedCurrency]
  const roundedRate = Number(rate).toFixed(2)

  const formatedBaseCurrency = baseCurrency.toUpperCase()
  const formatedCheckedCurrency = checkedCurrency.toUpperCase()

  const message =
    `1 ${formatedBaseCurrency} is ${roundedRate} ${formatedCheckedCurrency}`

  return message
}

function isHardcore() {
  return Math.random() <= 0.25 // const configuracyjny
}

function getRandomExercises() {
  let availableExercises = Object.keys(EXERCISES)

  let exercises = []
  let isHardcoreDay = isHardcore()
  let numberOfExercises = isHardcoreDay ? 3 : 2

  for (let i = 0; i < numberOfExercises; i++) {
    let exerciseIndex = getRandomInt(availableExercises.length-1)
    let exercise = availableExercises.splice(exerciseIndex, 1)[0]
    exercises.push(exercise)
  }

  return getExercisesMessage(exercises, isHardcoreDay)
}

function getExercisesMessage(exercises, isHardcoreDay) {
  return exercises.reduce(
    function (message, exercise) {
      let reps = EXERCISES[exercise] * (isHardcoreDay ? 2 : 1)
      return message + `${reps} ${exercise}\n`
    },
    ""
  )
}

async function main() {
  console.log(getMessage());
  console.log(`\n`+ "\x1b[36mWeather forecast:\x1B[39m");
  console.log(await getWeatherInfo());
  console.log(`\n`+ "\x1b[36mSong of the day:\x1B[39m");
  console.log(await getSongOfTheDay());
  console.log(`\n`+ "\x1b[36mNews of the day:\x1B[39m");
  console.log(await getMostPopularNews());
  console.log(`\n` + "\x1b[36mTodays currency rates:\x1B[39m");
  console.log(await getCurrencyRates("eur", "pln"));
  console.log(await getCurrencyRates("usd", "pln"));
  console.log(await getCurrencyRates("btc", "pln"));
  console.log(`\n` + "\x1b[36mLet's warm up a bit! Here are some exercises for you:\x1B[39m");
  console.log(await getRandomExercises());
}

main();